[{"/Users/avihhanaryakumarr/Desktop/Calculator React Project/src/index.js":"1","/Users/avihhanaryakumarr/Desktop/Calculator React Project/src/reportWebVitals.js":"2","/Users/avihhanaryakumarr/Desktop/Calculator React Project/src/App.js":"3","/Users/avihhanaryakumarr/Desktop/Calculator React Project/src/DigitButton.js":"4","/Users/avihhanaryakumarr/Desktop/Calculator React Project/src/OperationButton.js":"5","/Users/avihhanaryakumarr/Desktop/Calculator React Project/src/components/navbar.js":"6"},{"size":535,"mtime":1684524110106,"results":"7","hashOfConfig":"8"},{"size":362,"mtime":1684524110107,"results":"9","hashOfConfig":"8"},{"size":4819,"mtime":1684611183063,"results":"10","hashOfConfig":"8"},{"size":213,"mtime":1684601440279,"results":"11","hashOfConfig":"8"},{"size":236,"mtime":1684601688582,"results":"12","hashOfConfig":"8"},{"size":240,"mtime":1684611069062,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1xgq1yv",{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/avihhanaryakumarr/Desktop/Calculator React Project/src/index.js",[],[],"/Users/avihhanaryakumarr/Desktop/Calculator React Project/src/reportWebVitals.js",[],[],"/Users/avihhanaryakumarr/Desktop/Calculator React Project/src/App.js",["33","34","35"],[],"import { useReducer } from 'react'\nimport './App.css'\nimport DigitButton from './DigitButton.js'\nimport OperationButton from './OperationButton'\nimport Nav from './components/navbar'\n\nexport const ACTIONS = {\n  ADD_DIGIT: 'add-digits',\n  CHOOSE_OPERATION: 'choose-operation',\n  CLEAR: 'clear',\n  DELETE_DIGIT: 'delete-digits',\n  EVALUATE: 'evaluate'\n}\n\nfunction reducer (state, { type, payload }) {\n  switch (type) {\n    case ACTIONS.ADD_DIGIT:\n      if (state.overwrite) {\n        return {\n          ...state,\n          overwrite: false,\n          currentOperand: null\n        }\n      }\n      if (payload.digit === '0' && state.currentOperand === '0') return state\n      if (payload.digit === '.' && state.currentOperand.includes('.'))\n        return state\n      return {\n        ...state,\n        currentOperand: `${state.currentOperand || ''}${payload.digit}`\n      }\n\n    case ACTIONS.CHOOSE_OPERATION:\n      if (state.currentOperand == null && state.previousOperand == null) {\n        return state\n      }\n\n      if (state.previousOperand == null) {\n        return {\n          ...state,\n          operation: payload.operation,\n          previousOperand: state.currentOperand,\n          currentOperand: null\n        }\n      }\n\n      return {\n        ...state,\n        previousOperand: evaluate(state),\n        currentOperand: null,\n        operation: payload.operation\n      }\n\n    case ACTIONS.CLEAR:\n      return {}\n\n    case ACTIONS.EVALUATE:\n      if (\n        state.operation == null ||\n        state.currentOperand == null ||\n        state.previousOperand == null\n      ) {\n        return state\n      }\n\n      return {\n        ...state,\n        overwrite: true,\n        previousOperand: null,\n        operation: null,\n        currentOperand: evaluate(state)\n      }\n\n    case ACTIONS.DELETE_DIGIT:\n      if (state.overwrite) {\n        return {\n          ...state,\n          overwrite: false,\n          currentOperand: null\n        }\n      }\n      if (state.currentOperand == null) return state\n      if (state.currentOperand.length === 1) {\n        return { ...state, currentOperand: null }\n      }\n\n      return {\n        ...state,\n        currentOperand: state.currentOperand.slice(0, -1)\n      }\n  }\n}\n\nconst INTEGER_FORMATTER = new Intl.NumberFormat(\"en-us\", {maximumFractionDigits: 0})\n\nfunction formatOperand(operand) {\n  if(operand == null) return \n  const [integer, decimal] = operand.split('.')\n  if (decimal == null) return INTEGER_FORMATTER.format(integer)\n  return `${INTEGER_FORMATTER.format(integer)}.${decimal}`\n}\n\nfunction evaluate ({ currentOperand, previousOperand, operation }) {\n  const prev = parseFloat(previousOperand)\n  const current = parseFloat(currentOperand)\n  if (isNaN(prev) || isNaN(current)) return ''\n  let computation = ''\n  switch (operation) {\n    case '+':\n      computation = prev + current\n      break\n    case '-':\n      computation = prev - current\n      break\n    case '/':\n      computation = prev / current\n      break\n    case '*':\n      computation = prev * current\n      break\n  }\n  return computation.toString()\n\n}\n\nfunction App () {\n  const [{ currentOperand, previousOperand, operation }, dispatch] = useReducer(\n    reducer,\n    {}\n  )\n\n  return (\n    <div className='App'>\n      <Nav />\n      <div class='grid-container'>\n        <div className='merged-displ'>\n          <div className='process-display'>\n            {previousOperand}\n            {operation}\n          </div>\n          <div className='output-display'>{currentOperand}</div>\n        </div>\n\n        <button\n          class='grid-item merged-cell'\n          onClick={() => dispatch({ type: ACTIONS.CLEAR })}\n        >\n          AC\n        </button>\n        <button onClick={() => dispatch({ type: ACTIONS.DELETE_DIGIT })}>\n        DEL\n      </button>\n        <OperationButton operation='/' dispatch={dispatch} />\n\n        <DigitButton digit='1' dispatch={dispatch} />\n        <DigitButton digit='2' dispatch={dispatch} />\n        <DigitButton digit='3' dispatch={dispatch} />\n        <OperationButton operation='*' dispatch={dispatch} />\n\n        <DigitButton digit='4' dispatch={dispatch} />\n        <DigitButton digit='5' dispatch={dispatch} />\n        <DigitButton digit='6' dispatch={dispatch} />\n        <OperationButton operation='+' dispatch={dispatch} />\n\n        <DigitButton digit='7' dispatch={dispatch} />\n        <DigitButton digit='8' dispatch={dispatch} />\n        <DigitButton digit='9' dispatch={dispatch} />\n        <OperationButton operation='-' dispatch={dispatch} />\n\n        <DigitButton digit='.' dispatch={dispatch} />\n        <DigitButton digit='0' dispatch={dispatch} />\n        <button\n        className=\"merged-cell-2\"\n        onClick={() => dispatch({ type: ACTIONS.EVALUATE })}\n      >\n        =\n      </button>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","/Users/avihhanaryakumarr/Desktop/Calculator React Project/src/DigitButton.js",[],[],"/Users/avihhanaryakumarr/Desktop/Calculator React Project/src/OperationButton.js",[],[],"/Users/avihhanaryakumarr/Desktop/Calculator React Project/src/components/navbar.js",[],[],{"ruleId":"36","severity":1,"message":"37","line":16,"column":3,"nodeType":"38","messageId":"39","endLine":91,"endColumn":4},{"ruleId":"40","severity":1,"message":"41","line":96,"column":10,"nodeType":"42","messageId":"43","endLine":96,"endColumn":23},{"ruleId":"36","severity":1,"message":"37","line":108,"column":3,"nodeType":"38","messageId":"39","endLine":121,"endColumn":4},"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-unused-vars","'formatOperand' is defined but never used.","Identifier","unusedVar"]